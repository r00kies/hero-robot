; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\control.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Mylib -I..\Libraries -I..\CM3 -I..\User -I..\User\debug -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\control.crf ..\Mylib\control.c]
                          THUMB

                          AREA ||i.PID_Calculate||, CODE, READONLY, ALIGN=2

                  PID_Calculate PROC
;;;84     ***************************************************************/
;;;85     float PID_Calculate(PID_Struct* PID, float measured, float expect)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;86     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;87       float Value_Proportion;  
;;;88       float Value_Integral;
;;;89       float Value_Derivative;	
;;;90     
;;;91       PID->expectation =  expect;
00000a  6025              STR      r5,[r4,#0]
;;;92       PID->Err_k = (PID->expectation - measured)*10;
00000c  4639              MOV      r1,r7
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       __aeabi_fsub
000014  4682              MOV      r10,r0
000016  4929              LDR      r1,|L1.188|
000018  f7fffffe          BL       __aeabi_fmul
00001c  6060              STR      r0,[r4,#4]
;;;93       PID->SumErr+= PID->Err_k;
00001e  6861              LDR      r1,[r4,#4]
000020  6920              LDR      r0,[r4,#0x10]
000022  f7fffffe          BL       __aeabi_fadd
000026  6120              STR      r0,[r4,#0x10]
;;;94     
;;;95       //P I D
;;;96       Value_Proportion    = PID->Kp * PID->Err_k;
000028  6861              LDR      r1,[r4,#4]
00002a  6960              LDR      r0,[r4,#0x14]
00002c  f7fffffe          BL       __aeabi_fmul
000030  4681              MOV      r9,r0
;;;97       Value_Integral      =  PID->SumErr * PID->Ti;	
000032  69a1              LDR      r1,[r4,#0x18]
000034  6920              LDR      r0,[r4,#0x10]
000036  f7fffffe          BL       __aeabi_fmul
00003a  4606              MOV      r6,r0
;;;98       Value_Derivative  = PID->Kp * PID->Td * (PID->Err_k - PID->Err_k_1);
00003c  e9d40101          LDRD     r0,r1,[r4,#4]
000040  f7fffffe          BL       __aeabi_fsub
000044  4682              MOV      r10,r0
000046  69e1              LDR      r1,[r4,#0x1c]
000048  6960              LDR      r0,[r4,#0x14]
00004a  f7fffffe          BL       __aeabi_fmul
00004e  4683              MOV      r11,r0
000050  4651              MOV      r1,r10
000052  f7fffffe          BL       __aeabi_fmul
000056  4680              MOV      r8,r0
;;;99     
;;;100      if(Value_Integral > PID->PID_Integral_Max)
000058  4630              MOV      r0,r6
00005a  6ae1              LDR      r1,[r4,#0x2c]
00005c  f7fffffe          BL       __aeabi_cfrcmple
000060  d205              BCS      |L1.110|
;;;101      {
;;;102        PID->SumErr -= PID->Err_k;
000062  6861              LDR      r1,[r4,#4]
000064  6920              LDR      r0,[r4,#0x10]
000066  f7fffffe          BL       __aeabi_fsub
00006a  6120              STR      r0,[r4,#0x10]
;;;103    	Value_Integral = PID->PID_Integral_Max;
00006c  6ae6              LDR      r6,[r4,#0x2c]
                  |L1.110|
;;;104      }
;;;105      if(Value_Integral < PID->PID_Integral_Min)
00006e  4630              MOV      r0,r6
000070  6b21              LDR      r1,[r4,#0x30]
000072  f7fffffe          BL       __aeabi_cfcmple
000076  d205              BCS      |L1.132|
;;;106      {
;;;107      	PID->SumErr -= PID->Err_k;
000078  6861              LDR      r1,[r4,#4]
00007a  6920              LDR      r0,[r4,#0x10]
00007c  f7fffffe          BL       __aeabi_fsub
000080  6120              STR      r0,[r4,#0x10]
;;;108        Value_Integral = PID->PID_Integral_Min;
000082  6b26              LDR      r6,[r4,#0x30]
                  |L1.132|
;;;109      }
;;;110      
;;;111      PID->Ouput_deltaUk = Value_Proportion + Value_Integral + Value_Derivative;
000084  4631              MOV      r1,r6
000086  4648              MOV      r0,r9
000088  f7fffffe          BL       __aeabi_fadd
00008c  4682              MOV      r10,r0
00008e  4641              MOV      r1,r8
000090  f7fffffe          BL       __aeabi_fadd
000094  6220              STR      r0,[r4,#0x20]
;;;112    
;;;113      if(PID->Ouput_deltaUk > PID->Ouput_deltaUk_Max)
000096  e9d40108          LDRD     r0,r1,[r4,#0x20]
00009a  f7fffffe          BL       __aeabi_cfrcmple
00009e  d201              BCS      |L1.164|
;;;114      {PID->Ouput_deltaUk = PID->Ouput_deltaUk_Max;}
0000a0  6a60              LDR      r0,[r4,#0x24]
0000a2  6220              STR      r0,[r4,#0x20]
                  |L1.164|
;;;115      if(PID->Ouput_deltaUk < PID->Ouput_deltaUk_Min)
0000a4  6aa1              LDR      r1,[r4,#0x28]
0000a6  6a20              LDR      r0,[r4,#0x20]
0000a8  f7fffffe          BL       __aeabi_cfcmple
0000ac  d201              BCS      |L1.178|
;;;116      {PID->Ouput_deltaUk = PID->Ouput_deltaUk_Min;}
0000ae  6aa0              LDR      r0,[r4,#0x28]
0000b0  6220              STR      r0,[r4,#0x20]
                  |L1.178|
;;;117    
;;;118      PID->Err_k_1 = PID->Err_k;	  //保存k-1次误差值
0000b2  6860              LDR      r0,[r4,#4]
0000b4  60a0              STR      r0,[r4,#8]
;;;119      
;;;120      return PID->Ouput_deltaUk;
0000b6  6a20              LDR      r0,[r4,#0x20]
;;;121    }
0000b8  e8bd9ff0          POP      {r4-r12,pc}
;;;122    
                          ENDP

                  |L1.188|
                          DCD      0x41200000

                          AREA ||i.PID_Init||, CODE, READONLY, ALIGN=2

                  PID_Init PROC
;;;25     *************************/
;;;26     void PID_Init(PID_Struct *PID)
000000  2100              MOVS     r1,#0
;;;27     {
;;;28       PID->expectation         = 0.0;            //遥控给的期望值
000002  6001              STR      r1,[r0,#0]
;;;29       PID->Err_k			   = 0.0;            //当前误差值e(k)
000004  6041              STR      r1,[r0,#4]
;;;30       PID->Err_k_1		       = 0.0;           //k-1时刻误差值e(k-1)
000006  6081              STR      r1,[r0,#8]
;;;31       PID->Err_k_2		       = 0.0;           //k-2时刻误差值e(k-2)
000008  60c1              STR      r1,[r0,#0xc]
;;;32       PID->SumErr              = 0.0;			//误差和
00000a  6101              STR      r1,[r0,#0x10]
;;;33       PID->Kp				   = 9.0;           //比例系数，通过串口在线调PID参数再写入Flash
00000c  4907              LDR      r1,|L2.44|
00000e  6141              STR      r1,[r0,#0x14]
;;;34       PID->Ti				   = 1.1;           //积分系数，通过串口在线调PID参数再写入Flash
000010  4907              LDR      r1,|L2.48|
000012  6181              STR      r1,[r0,#0x18]
;;;35       PID->Td				   = 0.0;           //微分系数，通过串口在线调PID参数再写入Flash
000014  2100              MOVS     r1,#0
000016  61c1              STR      r1,[r0,#0x1c]
;;;36       PID->Ouput_deltaUk       = 0.0;		    //PID计算后的输出量U(k) - U(k-1)
000018  6201              STR      r1,[r0,#0x20]
;;;37       PID->Ouput_deltaUk_Max   = PWM_Period;		    //限制输出量最大值
00001a  4906              LDR      r1,|L2.52|
00001c  6241              STR      r1,[r0,#0x24]
;;;38       PID->Ouput_deltaUk_Min   = -PWM_Period;		    //限制输出量最小值
00001e  4906              LDR      r1,|L2.56|
000020  6281              STR      r1,[r0,#0x28]
;;;39       PID->PID_Integral_Max    = 3000.0;		     //限制积分项最大值
000022  4906              LDR      r1,|L2.60|
000024  62c1              STR      r1,[r0,#0x2c]
;;;40       PID->PID_Integral_Min    = -3000.0;			//限制积分项最小值
000026  4906              LDR      r1,|L2.64|
000028  6301              STR      r1,[r0,#0x30]
;;;41     }
00002a  4770              BX       lr
;;;42     
                          ENDP

                  |L2.44|
                          DCD      0x41100000
                  |L2.48|
                          DCD      0x3f8ccccd
                  |L2.52|
                          DCD      0x459c4000
                  |L2.56|
                          DCD      0xc59c4000
                  |L2.60|
                          DCD      0x453b8000
                  |L2.64|
                          DCD      0xc53b8000

                          AREA ||i.PIDz_Calculate||, CODE, READONLY, ALIGN=2

                  PIDz_Calculate PROC
;;;58     ***************************************************************/
;;;59     float PIDz_Calculate(PID_Struct* PID, float measured, float expect)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;60     {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
00000a  4615              MOV      r5,r2
;;;61          float K_p = PID->Kp;
00000c  6966              LDR      r6,[r4,#0x14]
;;;62          float T_d = PID->Td;
00000e  69e7              LDR      r7,[r4,#0x1c]
;;;63          float T_i = PID->Ti;
000010  f8d49018          LDR      r9,[r4,#0x18]
;;;64          float increment;
;;;65         PID->Err_k=PID->Err_k_1;
000014  68a0              LDR      r0,[r4,#8]
000016  6060              STR      r0,[r4,#4]
;;;66         PID->Err_k_1=PID->Err_k_2;
000018  68e0              LDR      r0,[r4,#0xc]
00001a  60a0              STR      r0,[r4,#8]
;;;67         PID->Err_k_2=(expect-measured)*100;
00001c  4641              MOV      r1,r8
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       __aeabi_fsub
000024  4683              MOV      r11,r0
000026  4921              LDR      r1,|L3.172|
000028  f7fffffe          BL       __aeabi_fmul
00002c  60e0              STR      r0,[r4,#0xc]
;;;68         increment = (K_p+T_i+T_d)*PID->Err_k_2-(K_p+2*T_d)*PID->Err_k_1+T_d*PID->Err_k;
00002e  4638              MOV      r0,r7
000030  6861              LDR      r1,[r4,#4]
000032  f7fffffe          BL       __aeabi_fmul
000036  4639              MOV      r1,r7
000038  9004              STR      r0,[sp,#0x10]
00003a  f04f4080          MOV      r0,#0x40000000
00003e  f7fffffe          BL       __aeabi_fmul
000042  4631              MOV      r1,r6
000044  9000              STR      r0,[sp,#0]
000046  f7fffffe          BL       __aeabi_fadd
00004a  4683              MOV      r11,r0
00004c  68a1              LDR      r1,[r4,#8]
00004e  f7fffffe          BL       __aeabi_fmul
000052  4649              MOV      r1,r9
000054  9002              STR      r0,[sp,#8]
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       __aeabi_fadd
00005c  4639              MOV      r1,r7
00005e  9000              STR      r0,[sp,#0]
000060  f7fffffe          BL       __aeabi_fadd
000064  4683              MOV      r11,r0
000066  68e1              LDR      r1,[r4,#0xc]
000068  f7fffffe          BL       __aeabi_fmul
00006c  9001              STR      r0,[sp,#4]
00006e  9902              LDR      r1,[sp,#8]
000070  f7fffffe          BL       __aeabi_fsub
000074  9003              STR      r0,[sp,#0xc]
000076  9904              LDR      r1,[sp,#0x10]
000078  f7fffffe          BL       __aeabi_fadd
00007c  4682              MOV      r10,r0
;;;69         PID->Ouput_deltaUk+=increment;
00007e  4651              MOV      r1,r10
000080  6a20              LDR      r0,[r4,#0x20]
000082  f7fffffe          BL       __aeabi_fadd
000086  6220              STR      r0,[r4,#0x20]
;;;70         if(PID->Ouput_deltaUk > PID->Ouput_deltaUk_Max)
000088  e9d40108          LDRD     r0,r1,[r4,#0x20]
00008c  f7fffffe          BL       __aeabi_cfrcmple
000090  d201              BCS      |L3.150|
;;;71         {
;;;72             PID->Ouput_deltaUk = PID->Ouput_deltaUk_Max;
000092  6a60              LDR      r0,[r4,#0x24]
000094  6220              STR      r0,[r4,#0x20]
                  |L3.150|
;;;73         }
;;;74         if(PID->Ouput_deltaUk < PID->Ouput_deltaUk_Min)
000096  6aa1              LDR      r1,[r4,#0x28]
000098  6a20              LDR      r0,[r4,#0x20]
00009a  f7fffffe          BL       __aeabi_cfcmple
00009e  d201              BCS      |L3.164|
;;;75         {
;;;76             PID->Ouput_deltaUk = PID->Ouput_deltaUk_Min;
0000a0  6aa0              LDR      r0,[r4,#0x28]
0000a2  6220              STR      r0,[r4,#0x20]
                  |L3.164|
;;;77         }
;;;78         
;;;79       return PID->Ouput_deltaUk;
0000a4  6a20              LDR      r0,[r4,#0x20]
;;;80     }
0000a6  b005              ADD      sp,sp,#0x14
0000a8  e8bd8ff0          POP      {r4-r11,pc}
;;;81     
                          ENDP

                  |L3.172|
                          DCD      0x42c80000

                          AREA ||i.pid_init_struct||, CODE, READONLY, ALIGN=2

                  pid_init_struct PROC
;;;42     
;;;43     void pid_init_struct(void)
000000  b500              PUSH     {lr}
;;;44     {
;;;45     	PID_Init(&PID_Power_Struct);
000002  480b              LDR      r0,|L4.48|
000004  f7fffffe          BL       PID_Init
;;;46     	PID_Init(&PID_Roll_V_Struct);
000008  480a              LDR      r0,|L4.52|
00000a  f7fffffe          BL       PID_Init
;;;47     	PID_Init(&PID_Pitch_V_Struct);
00000e  480a              LDR      r0,|L4.56|
000010  f7fffffe          BL       PID_Init
;;;48     	
;;;49     	PID_Init(&PID_Yaw_P_Struct);
000014  4809              LDR      r0,|L4.60|
000016  f7fffffe          BL       PID_Init
;;;50     	PID_Init(&PID_Roll_P_Struct);
00001a  4809              LDR      r0,|L4.64|
00001c  f7fffffe          BL       PID_Init
;;;51     	PID_Init(&PID_Pitch_P_Struct);
000020  4808              LDR      r0,|L4.68|
000022  f7fffffe          BL       PID_Init
;;;52     	PID_Init(&PID_Moto_Drive);
000026  4808              LDR      r0,|L4.72|
000028  f7fffffe          BL       PID_Init
;;;53     	
;;;54     }
00002c  bd00              POP      {pc}
;;;55     
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      PID_Power_Struct
                  |L4.52|
                          DCD      PID_Roll_V_Struct
                  |L4.56|
                          DCD      PID_Pitch_V_Struct
                  |L4.60|
                          DCD      PID_Yaw_P_Struct
                  |L4.64|
                          DCD      PID_Roll_P_Struct
                  |L4.68|
                          DCD      PID_Pitch_P_Struct
                  |L4.72|
                          DCD      PID_Moto_Drive

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  PID_Power_Struct
                          %        52
                  PID_Roll_V_Struct
                          %        52
                  PID_Pitch_V_Struct
                          %        52
                  PID_Yaw_P_Struct
                          %        52
                  PID_Roll_P_Struct
                          %        52
                  PID_Pitch_P_Struct
                          %        52
                  PID_Moto_Drive
                          %        52
                  Moto_Drive
                          %        36

                          AREA ||.data||, DATA, ALIGN=2

                  Time_dt
                          DCD      0x00000000
                  pid_roll
                          DCD      0x00000000
                  pid_pitch
                          DCD      0x00000000
                  pid_yaw
                          DCD      0x00000000
                  Motor_Ail
000010  00000000          DCFS     0x00000000 ; 0
                  Motor_Ele
000014  00000000          DCFS     0x00000000 ; 0
                  Motor_Thr
000018  00000000          DCFS     0x00000000 ; 0
                  Motor_Rud
00001c  00000000          DCFS     0x00000000 ; 0
