; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\can.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Mylib -I..\Libraries -I..\CM3 -I..\User -I..\User\debug -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\can.crf ..\Mylib\can.c]
                          THUMB

                          AREA ||i.CAN_Configuration||, CODE, READONLY, ALIGN=2

                  CAN_Configuration PROC
;;;5      u16 can_flag;
;;;6      void CAN_Configuration(void)
000000  b530              PUSH     {r4,r5,lr}
;;;7      {
000002  b089              SUB      sp,sp,#0x24
;;;8          u16 std_id =0x200,mask=0x0ff; 
000004  f44f7500          MOV      r5,#0x200
000008  24ff              MOVS     r4,#0xff
;;;9      	CAN_InitTypeDef        can;
;;;10     	CAN_FilterInitTypeDef  can_filter;
;;;11     	GPIO_InitTypeDef 	   gpio;
;;;12     	NVIC_InitTypeDef   	   nvic;
;;;13     
;;;14     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1,  ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0648              LSLS     r0,r1,#25
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;15     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000012  2101              MOVS     r1,#1
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;16         
;;;17     	gpio.GPIO_Pin = GPIO_Pin_11;
00001a  00a8              LSLS     r0,r5,#2
00001c  f8ad0004          STRH     r0,[sp,#4]
;;;18     	gpio.GPIO_Mode = GPIO_Mode_IPU;
000020  2048              MOVS     r0,#0x48
000022  f88d0007          STRB     r0,[sp,#7]
;;;19         gpio.GPIO_Speed = GPIO_Speed_50MHz;
000026  2003              MOVS     r0,#3
000028  f88d0006          STRB     r0,[sp,#6]
;;;20     	GPIO_Init(GPIOA, &gpio);	//CAN_RX
00002c  a901              ADD      r1,sp,#4
00002e  483f              LDR      r0,|L1.300|
000030  f7fffffe          BL       GPIO_Init
;;;21     	
;;;22     	gpio.GPIO_Pin = GPIO_Pin_12;	   
000034  00e8              LSLS     r0,r5,#3
000036  f8ad0004          STRH     r0,[sp,#4]
;;;23         gpio.GPIO_Mode = GPIO_Mode_AF_PP;
00003a  2018              MOVS     r0,#0x18
00003c  f88d0007          STRB     r0,[sp,#7]
;;;24     	gpio.GPIO_Speed = GPIO_Speed_50MHz;
000040  2003              MOVS     r0,#3
000042  f88d0006          STRB     r0,[sp,#6]
;;;25     	GPIO_Init(GPIOA, &gpio);    //CAN_TX
000046  a901              ADD      r1,sp,#4
000048  4838              LDR      r0,|L1.300|
00004a  f7fffffe          BL       GPIO_Init
;;;26     
;;;27         nvic.NVIC_IRQChannel = USB_HP_CAN1_TX_IRQn;
00004e  2013              MOVS     r0,#0x13
000050  f88d0000          STRB     r0,[sp,#0]
;;;28         nvic.NVIC_IRQChannelPreemptionPriority = 1;
000054  2001              MOVS     r0,#1
000056  f88d0001          STRB     r0,[sp,#1]
;;;29         nvic.NVIC_IRQChannelSubPriority = 0;
00005a  2000              MOVS     r0,#0
00005c  f88d0002          STRB     r0,[sp,#2]
;;;30         nvic.NVIC_IRQChannelCmd = ENABLE;
000060  2001              MOVS     r0,#1
000062  f88d0003          STRB     r0,[sp,#3]
;;;31         NVIC_Init(&nvic);
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       NVIC_Init
;;;32         
;;;33         nvic.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;  
00006c  2014              MOVS     r0,#0x14
00006e  f88d0000          STRB     r0,[sp,#0]
;;;34         nvic.NVIC_IRQChannelPreemptionPriority = 0;
000072  2000              MOVS     r0,#0
000074  f88d0001          STRB     r0,[sp,#1]
;;;35         nvic.NVIC_IRQChannelSubPriority = 0;
000078  f88d0002          STRB     r0,[sp,#2]
;;;36         nvic.NVIC_IRQChannelCmd = ENABLE;
00007c  2001              MOVS     r0,#1
00007e  f88d0003          STRB     r0,[sp,#3]
;;;37         NVIC_Init(&nvic);
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       NVIC_Init
;;;38     
;;;39     	CAN_DeInit(CAN1);
000088  4829              LDR      r0,|L1.304|
00008a  f7fffffe          BL       CAN_DeInit
;;;40     
;;;41     	can.CAN_TTCM = DISABLE;
00008e  2000              MOVS     r0,#0
000090  f88d001e          STRB     r0,[sp,#0x1e]
;;;42     	can.CAN_ABOM = DISABLE;
000094  f88d001f          STRB     r0,[sp,#0x1f]
;;;43     	can.CAN_AWUM = DISABLE;
000098  f88d0020          STRB     r0,[sp,#0x20]
;;;44     	can.CAN_NART = DISABLE;	  
00009c  f88d0021          STRB     r0,[sp,#0x21]
;;;45     	can.CAN_RFLM = DISABLE;																
0000a0  f88d0022          STRB     r0,[sp,#0x22]
;;;46     	can.CAN_TXFP = ENABLE;		
0000a4  2001              MOVS     r0,#1
0000a6  f88d0023          STRB     r0,[sp,#0x23]
;;;47      	can.CAN_Mode = CAN_Mode_Normal;
0000aa  2000              MOVS     r0,#0
0000ac  f88d001a          STRB     r0,[sp,#0x1a]
;;;48     	can.CAN_SJW = CAN_SJW_1tq;
0000b0  f88d001b          STRB     r0,[sp,#0x1b]
;;;49     	can.CAN_BS1 = CAN_BS1_5tq;
0000b4  2004              MOVS     r0,#4
0000b6  f88d001c          STRB     r0,[sp,#0x1c]
;;;50     	can.CAN_BS2 = CAN_BS2_3tq;
0000ba  2002              MOVS     r0,#2
0000bc  f88d001d          STRB     r0,[sp,#0x1d]
;;;51     	can.CAN_Prescaler = 4;     //CAN BaudRate 36/(1+5+3)/4=1Mbps
0000c0  2004              MOVS     r0,#4
0000c2  f8ad0018          STRH     r0,[sp,#0x18]
;;;52     	CAN_Init(CAN1, &can);
0000c6  a906              ADD      r1,sp,#0x18
0000c8  4819              LDR      r0,|L1.304|
0000ca  f7fffffe          BL       CAN_Init
;;;53         
;;;54     	can_filter.CAN_FilterNumber = 0;
0000ce  2000              MOVS     r0,#0
0000d0  f88d0012          STRB     r0,[sp,#0x12]
;;;55     	can_filter.CAN_FilterMode = CAN_FilterMode_IdMask;
0000d4  f88d0013          STRB     r0,[sp,#0x13]
;;;56     	can_filter.CAN_FilterScale = CAN_FilterScale_32bit;
0000d8  2001              MOVS     r0,#1
0000da  f88d0014          STRB     r0,[sp,#0x14]
;;;57     	can_filter.CAN_FilterIdHigh = std_id<<5;;
0000de  f64f70ff          MOV      r0,#0xffff
0000e2  ea001045          AND      r0,r0,r5,LSL #5
0000e6  f8ad0008          STRH     r0,[sp,#8]
;;;58     	can_filter.CAN_FilterIdLow = 0|CAN_ID_STD;
0000ea  2000              MOVS     r0,#0
0000ec  f8ad000a          STRH     r0,[sp,#0xa]
;;;59     	can_filter.CAN_FilterMaskIdHigh = mask<<5;
0000f0  f64f70ff          MOV      r0,#0xffff
0000f4  ea001044          AND      r0,r0,r4,LSL #5
0000f8  f8ad000c          STRH     r0,[sp,#0xc]
;;;60     	can_filter.CAN_FilterMaskIdLow = 0x0000;
0000fc  2000              MOVS     r0,#0
0000fe  f8ad000e          STRH     r0,[sp,#0xe]
;;;61     	can_filter.CAN_FilterFIFOAssignment = 0;
000102  f8ad0010          STRH     r0,[sp,#0x10]
;;;62     	can_filter.CAN_FilterActivation = ENABLE;
000106  2001              MOVS     r0,#1
000108  f88d0015          STRB     r0,[sp,#0x15]
;;;63     	CAN_FilterInit(&can_filter);
00010c  a802              ADD      r0,sp,#8
00010e  f7fffffe          BL       CAN_FilterInit
;;;64     
;;;65         CAN_ITConfig(CAN1,CAN_IT_FMP0,ENABLE);
000112  2201              MOVS     r2,#1
000114  2102              MOVS     r1,#2
000116  4806              LDR      r0,|L1.304|
000118  f7fffffe          BL       CAN_ITConfig
;;;66         CAN_ITConfig(CAN1,CAN_IT_TME,ENABLE);
00011c  2201              MOVS     r2,#1
00011e  4611              MOV      r1,r2
000120  4803              LDR      r0,|L1.304|
000122  f7fffffe          BL       CAN_ITConfig
;;;67     }
000126  b009              ADD      sp,sp,#0x24
000128  bd30              POP      {r4,r5,pc}
;;;68     unsigned char can_tx_success_flag = 0;
                          ENDP

00012a  0000              DCW      0x0000
                  |L1.300|
                          DCD      0x40010800
                  |L1.304|
                          DCD      0x40006400

                          AREA ||i.USB_HP_CAN1_TX_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_HP_CAN1_TX_IRQHandler PROC
;;;143    
;;;144    void USB_HP_CAN1_TX_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146        if (CAN_GetITStatus(CAN1,CAN_IT_TME)!= RESET) 
000002  2101              MOVS     r1,#1
000004  4805              LDR      r0,|L2.28|
000006  f7fffffe          BL       CAN_GetITStatus
00000a  b130              CBZ      r0,|L2.26|
;;;147    	{
;;;148    	   CAN_ClearITPendingBit(CAN1,CAN_IT_TME);
00000c  2101              MOVS     r1,#1
00000e  4803              LDR      r0,|L2.28|
000010  f7fffffe          BL       CAN_ClearITPendingBit
;;;149    		 can_tx_success_flag = 1;
000014  2001              MOVS     r0,#1
000016  4902              LDR      r1,|L2.32|
000018  7008              STRB     r0,[r1,#0]
                  |L2.26|
;;;150      }
;;;151    }
00001a  bd10              POP      {r4,pc}
                          ENDP

                  |L2.28|
                          DCD      0x40006400
                  |L2.32|
                          DCD      can_tx_success_flag

                          AREA ||i.USB_LP_CAN1_RX0_IRQHandler||, CODE, READONLY, ALIGN=2

                  USB_LP_CAN1_RX0_IRQHandler PROC
;;;71     static s16 Value_H,Value_L,Value;
;;;72     void USB_LP_CAN1_RX0_IRQHandler(void)
000000  b530              PUSH     {r4,r5,lr}
;;;73     {
000002  b085              SUB      sp,sp,#0x14
;;;74      
;;;75           CanRxMsg rx_message;    
;;;76     	  uint32_t Mode_date,ID_date;
;;;77     	  s16 Speed_Value_H,Speed_Value_L,Speed_Value;
;;;78     	  
;;;79         if (CAN_GetITStatus(CAN1,CAN_IT_FMP0)!= RESET) 
000004  2102              MOVS     r1,#2
000006  4864              LDR      r0,|L3.408|
000008  f7fffffe          BL       CAN_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d06e              BEQ      |L3.238|
;;;80     	{
;;;81     		 CAN_Receive(CAN1, CAN_FIFO0, &rx_message);
000010  466a              MOV      r2,sp
000012  2100              MOVS     r1,#0
000014  4860              LDR      r0,|L3.408|
000016  f7fffffe          BL       CAN_Receive
;;;82             if(rx_message.StdId==0x200)
00001a  9800              LDR      r0,[sp,#0]
00001c  f5b07f00          CMP      r0,#0x200
000020  d16b              BNE      |L3.250|
;;;83             {
;;;84                 switch(Moto_Drive.Can_id)
000022  485e              LDR      r0,|L3.412|
000024  7800              LDRB     r0,[r0,#0]  ; Moto_Drive
000026  2801              CMP      r0,#1
000028  d006              BEQ      |L3.56|
00002a  2802              CMP      r0,#2
00002c  d00d              BEQ      |L3.74|
00002e  2803              CMP      r0,#3
000030  d014              BEQ      |L3.92|
000032  2804              CMP      r0,#4
000034  d124              BNE      |L3.128|
000036  e01a              B        |L3.110|
                  |L3.56|
;;;85                 {
;;;86                     case 1:
;;;87                     Value_H=rx_message.Data[0];
000038  f89d000b          LDRB     r0,[sp,#0xb]
00003c  4958              LDR      r1,|L3.416|
00003e  8008              STRH     r0,[r1,#0]
;;;88                     Value_L=rx_message.Data[1];break;
000040  f89d000c          LDRB     r0,[sp,#0xc]
000044  4957              LDR      r1,|L3.420|
000046  8008              STRH     r0,[r1,#0]
000048  e01a              B        |L3.128|
                  |L3.74|
;;;89                     case 2:
;;;90                     Value_H=rx_message.Data[2];
00004a  f89d000d          LDRB     r0,[sp,#0xd]
00004e  4954              LDR      r1,|L3.416|
000050  8008              STRH     r0,[r1,#0]
;;;91                     Value_L=rx_message.Data[3];break;
000052  f89d000e          LDRB     r0,[sp,#0xe]
000056  4953              LDR      r1,|L3.420|
000058  8008              STRH     r0,[r1,#0]
00005a  e011              B        |L3.128|
                  |L3.92|
;;;92                     case 3:
;;;93                     Value_H=rx_message.Data[4];
00005c  f89d000f          LDRB     r0,[sp,#0xf]
000060  494f              LDR      r1,|L3.416|
000062  8008              STRH     r0,[r1,#0]
;;;94                     Value_L=rx_message.Data[5];break;
000064  f89d0010          LDRB     r0,[sp,#0x10]
000068  494e              LDR      r1,|L3.420|
00006a  8008              STRH     r0,[r1,#0]
00006c  e008              B        |L3.128|
                  |L3.110|
;;;95                     case 4:
;;;96                     Value_H=rx_message.Data[6];
00006e  f89d0011          LDRB     r0,[sp,#0x11]
000072  494b              LDR      r1,|L3.416|
000074  8008              STRH     r0,[r1,#0]
;;;97                     Value_L=rx_message.Data[7];break;
000076  f89d0012          LDRB     r0,[sp,#0x12]
00007a  494a              LDR      r1,|L3.420|
00007c  8008              STRH     r0,[r1,#0]
00007e  bf00              NOP      
                  |L3.128|
000080  bf00              NOP                            ;88
;;;98                 }
;;;99                     
;;;100                switch(Can_Moto_Date_struct.MOTO_MODE)
000082  4849              LDR      r0,|L3.424|
000084  7880              LDRB     r0,[r0,#2]  ; Can_Moto_Date_struct
000086  2811              CMP      r0,#0x11
000088  d006              BEQ      |L3.152|
00008a  2822              CMP      r0,#0x22
00008c  d030              BEQ      |L3.240|
00008e  2833              CMP      r0,#0x33
000090  d01c              BEQ      |L3.204|
000092  2844              CMP      r0,#0x44
000094  d12e              BNE      |L3.244|
000096  e02c              B        |L3.242|
                  |L3.152|
;;;101                {
;;;102                case ENTER_PWM_MODE:
;;;103                    Value=Value_H<<8|Value_L;
000098  4842              LDR      r0,|L3.420|
00009a  8800              LDRH     r0,[r0,#0]  ; Value_L
00009c  4940              LDR      r1,|L3.416|
00009e  7809              LDRB     r1,[r1,#0]  ; Value_H
0000a0  ea402001          ORR      r0,r0,r1,LSL #8
0000a4  b200              SXTH     r0,r0
0000a6  4941              LDR      r1,|L3.428|
0000a8  8008              STRH     r0,[r1,#0]
;;;104                    Moto_Drive.PWM_Value=Value;
0000aa  4608              MOV      r0,r1
0000ac  8800              LDRH     r0,[r0,#0]  ; Value
0000ae  493b              LDR      r1,|L3.412|
0000b0  81c8              STRH     r0,[r1,#0xe]
;;;105                    MotorSpeedOut(Moto_Drive.PWM_Value*Moto_Drive.Moto_Dir);						 
0000b2  89c8              LDRH     r0,[r1,#0xe]  ; Moto_Drive
0000b4  f7fffffe          BL       __aeabi_ui2f
0000b8  4605              MOV      r5,r0
0000ba  4838              LDR      r0,|L3.412|
0000bc  6881              LDR      r1,[r0,#8]  ; Moto_Drive
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       __aeabi_fmul
0000c4  4604              MOV      r4,r0
0000c6  f7fffffe          BL       MotorSpeedOut
;;;106                    break;
0000ca  e013              B        |L3.244|
                  |L3.204|
;;;107                case ENTER_SPEED_MODE:
;;;108                    Value=Value_H<<8|Value_L;
0000cc  4835              LDR      r0,|L3.420|
0000ce  8800              LDRH     r0,[r0,#0]  ; Value_L
0000d0  4933              LDR      r1,|L3.416|
0000d2  7809              LDRB     r1,[r1,#0]  ; Value_H
0000d4  ea402001          ORR      r0,r0,r1,LSL #8
0000d8  b200              SXTH     r0,r0
0000da  4934              LDR      r1,|L3.428|
0000dc  8008              STRH     r0,[r1,#0]
;;;109                    Moto_Drive.Speed_Value=Value;break;
0000de  4608              MOV      r0,r1
0000e0  f9b00000          LDRSH    r0,[r0,#0]  ; Value
0000e4  f7fffffe          BL       __aeabi_i2f
0000e8  492c              LDR      r1,|L3.412|
0000ea  6108              STR      r0,[r1,#0x10]  ; Moto_Drive
0000ec  e002              B        |L3.244|
                  |L3.238|
0000ee  e051              B        |L3.404|
                  |L3.240|
;;;110                    case ENTER_CURRENT_MODE:    break;
0000f0  e000              B        |L3.244|
                  |L3.242|
;;;111                    case ENTER_LOCATION_MODE:   break;
0000f2  bf00              NOP      
                  |L3.244|
0000f4  bf00              NOP                            ;106
                  |L3.246|
;;;112                }
;;;113               return;  
;;;114            }
;;;115    		 if(rx_message.StdId==0x300)
;;;116    		 {
;;;117    					 Can_Moto_Date_struct.MOTO_MODE=rx_message.Data[0];
;;;118    					 Mode_Chioce_flage=0;
;;;119    					 switch(Can_Moto_Date_struct.MOTO_MODE)
;;;120    				   {
;;;121    					 case ENTER_PWM_MODE:
;;;122    							TIM2->CCR4=0;
;;;123    							TIM2->CCR3=0;
;;;124          						TIM_Cmd(TIM4, DISABLE); break;
;;;125    					 case ENTER_SPEED_MODE:
;;;126                                Value_H=rx_message.Data[1];
;;;127                                Value_L=rx_message.Data[2];
;;;128                                Value=Value_H<<8|Value_L;
;;;129                                Moto_Drive.PWM_Value =Value;
;;;130    						    PID_Moto_Drive.Ouput_deltaUk_Max=Moto_Drive.Pwm_Max;
;;;131    						    PID_Moto_Drive.Ouput_deltaUk_Min=-Moto_Drive.Pwm_Max;
;;;132                                Moto_Drive.Speed_Value=0;
;;;133          						TIM_Cmd(TIM4, ENABLE);break;					 
;;;134    					 case ENTER_CURRENT_MODE:   break;	
;;;135    					 case ENTER_LOCATION_MODE:   break;	
;;;136    				   }
;;;137    					  return;
;;;138    		}
;;;139    
;;;140    
;;;141      }
;;;142    }
0000f6  b005              ADD      sp,sp,#0x14
0000f8  bd30              POP      {r4,r5,pc}
                  |L3.250|
0000fa  9800              LDR      r0,[sp,#0]            ;115
0000fc  f5b07f40          CMP      r0,#0x300             ;115
000100  d148              BNE      |L3.404|
000102  f89d000b          LDRB     r0,[sp,#0xb]          ;117
000106  4928              LDR      r1,|L3.424|
000108  7088              STRB     r0,[r1,#2]            ;117
00010a  2000              MOVS     r0,#0                 ;118
00010c  4928              LDR      r1,|L3.432|
00010e  7008              STRB     r0,[r1,#0]            ;118
000110  4825              LDR      r0,|L3.424|
000112  7880              LDRB     r0,[r0,#2]            ;119  ; Can_Moto_Date_struct
000114  2811              CMP      r0,#0x11              ;119
000116  d006              BEQ      |L3.294|
000118  2822              CMP      r0,#0x22              ;119
00011a  d037              BEQ      |L3.396|
00011c  2833              CMP      r0,#0x33              ;119
00011e  d00c              BEQ      |L3.314|
000120  2844              CMP      r0,#0x44              ;119
000122  d135              BNE      |L3.400|
000124  e033              B        |L3.398|
                  |L3.294|
000126  2000              MOVS     r0,#0                 ;122
000128  4922              LDR      r1,|L3.436|
00012a  8008              STRH     r0,[r1,#0]            ;122
00012c  0609              LSLS     r1,r1,#24             ;123
00012e  8788              STRH     r0,[r1,#0x3c]         ;123
000130  2100              MOVS     r1,#0                 ;124
000132  4821              LDR      r0,|L3.440|
000134  f7fffffe          BL       TIM_Cmd
000138  e02a              B        |L3.400|
                  |L3.314|
00013a  f89d000c          LDRB     r0,[sp,#0xc]          ;126
00013e  4918              LDR      r1,|L3.416|
000140  8008              STRH     r0,[r1,#0]            ;126
000142  f89d000d          LDRB     r0,[sp,#0xd]          ;127
000146  4917              LDR      r1,|L3.420|
000148  8008              STRH     r0,[r1,#0]            ;127
00014a  4608              MOV      r0,r1                 ;128
00014c  8800              LDRH     r0,[r0,#0]            ;128  ; Value_L
00014e  4914              LDR      r1,|L3.416|
000150  7809              LDRB     r1,[r1,#0]            ;128  ; Value_H
000152  ea402001          ORR      r0,r0,r1,LSL #8       ;128
000156  b200              SXTH     r0,r0                 ;128
000158  4914              LDR      r1,|L3.428|
00015a  8008              STRH     r0,[r1,#0]            ;128
00015c  4608              MOV      r0,r1                 ;129
00015e  8800              LDRH     r0,[r0,#0]            ;129  ; Value
000160  490e              LDR      r1,|L3.412|
000162  81c8              STRH     r0,[r1,#0xe]          ;129
000164  8a88              LDRH     r0,[r1,#0x14]         ;130  ; Moto_Drive
000166  f7fffffe          BL       __aeabi_ui2f
00016a  4914              LDR      r1,|L3.444|
00016c  6248              STR      r0,[r1,#0x24]         ;130  ; PID_Moto_Drive
00016e  490b              LDR      r1,|L3.412|
000170  8a89              LDRH     r1,[r1,#0x14]         ;131  ; Moto_Drive
000172  4248              RSBS     r0,r1,#0              ;131
000174  f7fffffe          BL       __aeabi_i2f
000178  4910              LDR      r1,|L3.444|
00017a  6288              STR      r0,[r1,#0x28]         ;131  ; PID_Moto_Drive
00017c  2000              MOVS     r0,#0                 ;132
00017e  4907              LDR      r1,|L3.412|
000180  6108              STR      r0,[r1,#0x10]         ;132  ; Moto_Drive
000182  2101              MOVS     r1,#1                 ;133
000184  480c              LDR      r0,|L3.440|
000186  f7fffffe          BL       TIM_Cmd
00018a  e001              B        |L3.400|
                  |L3.396|
00018c  e000              B        |L3.400|
                  |L3.398|
00018e  bf00              NOP                            ;135
                  |L3.400|
000190  bf00              NOP                            ;124
000192  e7b0              B        |L3.246|
                  |L3.404|
000194  bf00              NOP      
000196  e7ae              B        |L3.246|
;;;143    
                          ENDP

                  |L3.408|
                          DCD      0x40006400
                  |L3.412|
                          DCD      Moto_Drive
                  |L3.416|
                          DCD      Value_H
                  |L3.420|
                          DCD      Value_L
                  |L3.424|
                          DCD      Can_Moto_Date_struct
                  |L3.428|
                          DCD      Value
                  |L3.432|
                          DCD      Mode_Chioce_flage
                  |L3.436|
                          DCD      0x40000040
                  |L3.440|
                          DCD      0x40000800
                  |L3.444|
                          DCD      PID_Moto_Drive

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RxMessage
                          %        20
                  TxMessage
                          %        20
                  Can_Moto_Date_struct
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  can_flag
000000  0000              DCB      0x00,0x00
                  can_tx_success_flag
000002  00                DCB      0x00
                  Mode_Chioce_flage
000003  00                DCB      0x00
                  Value_H
000004  0000              DCB      0x00,0x00
                  Value_L
000006  0000              DCB      0x00,0x00
                  Value
000008  0000              DCB      0x00,0x00
