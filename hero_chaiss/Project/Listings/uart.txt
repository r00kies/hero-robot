; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\uart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\uart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Mylib -I..\Libraries -I..\CM3 -I..\User -I..\User\debug -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\uart.crf ..\Mylib\UART.c]
                          THUMB

                          AREA ||i.DMA1_Channel5_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA1_Channel5_IRQHandler PROC
;;;83     
;;;84     void DMA1_Channel5_IRQHandler() 
000000  b510              PUSH     {r4,lr}
;;;85     {
;;;86         if(DMA_GetITStatus(DMA1_IT_TC5) == SET)
000002  f44f3000          MOV      r0,#0x20000
000006  f7fffffe          BL       DMA_GetITStatus
00000a  2801              CMP      r0,#1
00000c  d106              BNE      |L1.28|
;;;87         {
;;;88             DMA_ClearFlag(DMA1_FLAG_TC5);
00000e  0440              LSLS     r0,r0,#17
000010  f7fffffe          BL       DMA_ClearFlag
;;;89             DMA_ClearITPendingBit(DMA1_IT_TC5);
000014  f44f3000          MOV      r0,#0x20000
000018  f7fffffe          BL       DMA_ClearITPendingBit
                  |L1.28|
;;;90         }
;;;91     }
00001c  bd10              POP      {r4,pc}
;;;92     void USART1_Send_Date( USART_TypeDef* USARTx, u8 *pWord, u16 Len )
                          ENDP


                          AREA ||i.USART1_Configuration||, CODE, READONLY, ALIGN=2

                  USART1_Configuration PROC
;;;4      uint8_t com_cmd1_flag=0,com_cmd2_flag=0;
;;;5      void USART1_Configuration(void)
000000  b500              PUSH     {lr}
;;;6      {
000002  b091              SUB      sp,sp,#0x44
;;;7          USART_InitTypeDef usart;
;;;8          GPIO_InitTypeDef  gpio;
;;;9          NVIC_InitTypeDef  nvic;
;;;10         DMA_InitTypeDef   dma;
;;;11     
;;;12         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;13         RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;14         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);
000014  2101              MOVS     r1,#1
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;15     
;;;16         gpio.GPIO_Pin = GPIO_Pin_10;
00001c  f44f6080          MOV      r0,#0x400
000020  f8ad0030          STRH     r0,[sp,#0x30]
;;;17         gpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000024  2004              MOVS     r0,#4
000026  f88d0033          STRB     r0,[sp,#0x33]
;;;18         GPIO_Init(GPIOA,&gpio);
00002a  a90c              ADD      r1,sp,#0x30
00002c  4840              LDR      r0,|L2.304|
00002e  f7fffffe          BL       GPIO_Init
;;;19     
;;;20         gpio.GPIO_Pin = GPIO_Pin_9;  
000032  f44f7000          MOV      r0,#0x200
000036  f8ad0030          STRH     r0,[sp,#0x30]
;;;21         gpio.GPIO_Mode = GPIO_Mode_AF_PP;
00003a  2018              MOVS     r0,#0x18
00003c  f88d0033          STRB     r0,[sp,#0x33]
;;;22         gpio.GPIO_Speed = GPIO_Speed_50MHz;
000040  2003              MOVS     r0,#3
000042  f88d0032          STRB     r0,[sp,#0x32]
;;;23         GPIO_Init(GPIOA,&gpio);
000046  a90c              ADD      r1,sp,#0x30
000048  4839              LDR      r0,|L2.304|
00004a  f7fffffe          BL       GPIO_Init
;;;24     
;;;25         USART_DeInit(USART1);
00004e  4839              LDR      r0,|L2.308|
000050  f7fffffe          BL       USART_DeInit
;;;26         usart.USART_BaudRate = 115200;
000054  f44f30e1          MOV      r0,#0x1c200
000058  900d              STR      r0,[sp,#0x34]
;;;27         usart.USART_WordLength = USART_WordLength_8b;
00005a  2000              MOVS     r0,#0
00005c  f8ad0038          STRH     r0,[sp,#0x38]
;;;28         usart.USART_StopBits = USART_StopBits_1;
000060  f8ad003a          STRH     r0,[sp,#0x3a]
;;;29         usart.USART_Parity = USART_Parity_No ;
000064  f8ad003c          STRH     r0,[sp,#0x3c]
;;;30         usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000068  200c              MOVS     r0,#0xc
00006a  f8ad003e          STRH     r0,[sp,#0x3e]
;;;31         usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;   
00006e  2000              MOVS     r0,#0
000070  f8ad0040          STRH     r0,[sp,#0x40]
;;;32         USART_Init(USART1,&usart);
000074  a90d              ADD      r1,sp,#0x34
000076  482f              LDR      r0,|L2.308|
000078  f7fffffe          BL       USART_Init
;;;33     		
;;;34     		 USART_ITConfig(USART1,USART_IT_IDLE,ENABLE);   
00007c  2201              MOVS     r2,#1
00007e  f2404124          MOV      r1,#0x424
000082  482c              LDR      r0,|L2.308|
000084  f7fffffe          BL       USART_ITConfig
;;;35     		 USART_ITConfig(USART1, USART_IT_RXNE ,DISABLE);
000088  2200              MOVS     r2,#0
00008a  f2405125          MOV      r1,#0x525
00008e  4829              LDR      r0,|L2.308|
000090  f7fffffe          BL       USART_ITConfig
;;;36          USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
000094  2201              MOVS     r2,#1
000096  2140              MOVS     r1,#0x40
000098  4826              LDR      r0,|L2.308|
00009a  f7fffffe          BL       USART_DMACmd
;;;37     	   USART_Cmd(USART1,ENABLE);
00009e  2101              MOVS     r1,#1
0000a0  4824              LDR      r0,|L2.308|
0000a2  f7fffffe          BL       USART_Cmd
;;;38         
;;;39         dma.DMA_PeripheralBaseAddr = (uint32_t)&(USART1->DR);
0000a6  4823              LDR      r0,|L2.308|
0000a8  1d00              ADDS     r0,r0,#4
0000aa  9000              STR      r0,[sp,#0]
;;;40         dma.DMA_MemoryBaseAddr = (uint32_t)Uart1_Rx;   
0000ac  4822              LDR      r0,|L2.312|
0000ae  9001              STR      r0,[sp,#4]
;;;41         dma.DMA_DIR = DMA_DIR_PeripheralSRC;
0000b0  2000              MOVS     r0,#0
0000b2  9002              STR      r0,[sp,#8]
;;;42         dma.DMA_BufferSize = Uart1_Rx_LEN;
0000b4  2080              MOVS     r0,#0x80
0000b6  9003              STR      r0,[sp,#0xc]
;;;43         dma.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000b8  2000              MOVS     r0,#0
0000ba  9004              STR      r0,[sp,#0x10]
;;;44         dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000bc  2080              MOVS     r0,#0x80
0000be  9005              STR      r0,[sp,#0x14]
;;;45         dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
0000c0  2000              MOVS     r0,#0
0000c2  9006              STR      r0,[sp,#0x18]
;;;46         dma.DMA_MemoryDataSize = DMA_PeripheralDataSize_Byte;
0000c4  9007              STR      r0,[sp,#0x1c]
;;;47         dma.DMA_Mode = DMA_Mode_Circular;
0000c6  2020              MOVS     r0,#0x20
0000c8  9008              STR      r0,[sp,#0x20]
;;;48         dma.DMA_Priority = DMA_Priority_VeryHigh;
0000ca  f44f5040          MOV      r0,#0x3000
0000ce  9009              STR      r0,[sp,#0x24]
;;;49         dma.DMA_M2M = DMA_M2M_Disable;
0000d0  2000              MOVS     r0,#0
0000d2  900a              STR      r0,[sp,#0x28]
;;;50         DMA_Init(DMA1_Channel5,&dma);
0000d4  4669              MOV      r1,sp
0000d6  4819              LDR      r0,|L2.316|
0000d8  f7fffffe          BL       DMA_Init
;;;51         DMA_ITConfig(DMA1_Channel5, DMA_IT_TC, ENABLE);
0000dc  2201              MOVS     r2,#1
0000de  2102              MOVS     r1,#2
0000e0  4816              LDR      r0,|L2.316|
0000e2  f7fffffe          BL       DMA_ITConfig
;;;52     		
;;;53     	  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); 
0000e6  f44f60a0          MOV      r0,#0x500
0000ea  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;54         nvic.NVIC_IRQChannel = DMA1_Channel5_IRQn;
0000ee  200f              MOVS     r0,#0xf
0000f0  f88d002c          STRB     r0,[sp,#0x2c]
;;;55         nvic.NVIC_IRQChannelPreemptionPriority = 1;
0000f4  2001              MOVS     r0,#1
0000f6  f88d002d          STRB     r0,[sp,#0x2d]
;;;56         nvic.NVIC_IRQChannelSubPriority = 1;
0000fa  f88d002e          STRB     r0,[sp,#0x2e]
;;;57         nvic.NVIC_IRQChannelCmd = ENABLE;
0000fe  f88d002f          STRB     r0,[sp,#0x2f]
;;;58         NVIC_Init(&nvic);
000102  a80b              ADD      r0,sp,#0x2c
000104  f7fffffe          BL       NVIC_Init
;;;59     		
;;;60     		
;;;61        
;;;62        nvic.NVIC_IRQChannel = USART1_IRQn;
000108  2025              MOVS     r0,#0x25
00010a  f88d002c          STRB     r0,[sp,#0x2c]
;;;63        nvic.NVIC_IRQChannelPreemptionPriority = 2;
00010e  2002              MOVS     r0,#2
000110  f88d002d          STRB     r0,[sp,#0x2d]
;;;64        nvic.NVIC_IRQChannelSubPriority = 1;
000114  2001              MOVS     r0,#1
000116  f88d002e          STRB     r0,[sp,#0x2e]
;;;65        nvic.NVIC_IRQChannelCmd = ENABLE;
00011a  f88d002f          STRB     r0,[sp,#0x2f]
;;;66        NVIC_Init(&nvic); 
00011e  a80b              ADD      r0,sp,#0x2c
000120  f7fffffe          BL       NVIC_Init
;;;67        DMA_Cmd(DMA1_Channel5, ENABLE);	 
000124  2101              MOVS     r1,#1
000126  4805              LDR      r0,|L2.316|
000128  f7fffffe          BL       DMA_Cmd
;;;68        
;;;69     }
00012c  b011              ADD      sp,sp,#0x44
00012e  bd00              POP      {pc}
;;;70     
                          ENDP

                  |L2.304|
                          DCD      0x40010800
                  |L2.308|
                          DCD      0x40013800
                  |L2.312|
                          DCD      Uart1_Rx
                  |L2.316|
                          DCD      0x40020058

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;101    
;;;102    void USART1_IRQHandler(void)                               
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
;;;104    	uint32_t temp = 0,i;
000002  2500              MOVS     r5,#0
;;;105    	
;;;106    	if(USART_GetITStatus(USART1, USART_IT_IDLE) != RESET)
000004  f2404124          MOV      r1,#0x424
000008  4815              LDR      r0,|L3.96|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b328              CBZ      r0,|L3.92|
;;;107        {
;;;108    			TIM_Cmd(TIM4, DISABLE);
000010  2100              MOVS     r1,#0
000012  4814              LDR      r0,|L3.100|
000014  f7fffffe          BL       TIM_Cmd
;;;109        	temp = USART1->SR;
000018  4811              LDR      r0,|L3.96|
00001a  8805              LDRH     r5,[r0,#0]
;;;110        	temp = USART1->DR;
00001c  1d00              ADDS     r0,r0,#4
00001e  8805              LDRH     r5,[r0,#0]
;;;111        	DMA_Cmd(DMA1_Channel5,DISABLE);
000020  2100              MOVS     r1,#0
000022  4811              LDR      r0,|L3.104|
000024  f7fffffe          BL       DMA_Cmd
;;;112    	  	temp = Uart1_Rx_LEN - DMA_GetCurrDataCounter(DMA1_Channel5);
000028  480f              LDR      r0,|L3.104|
00002a  f7fffffe          BL       DMA_GetCurrDataCounter
00002e  f1c00580          RSB      r5,r0,#0x80
;;;113    		for(i=0;i<temp;i++)
000032  2400              MOVS     r4,#0
000034  e004              B        |L3.64|
                  |L3.54|
;;;114        ANO_DT_Data_Receive_Prepare(Uart1_Rx[i]);
000036  490d              LDR      r1,|L3.108|
000038  5d08              LDRB     r0,[r1,r4]
00003a  f7fffffe          BL       ANO_DT_Data_Receive_Prepare
00003e  1c64              ADDS     r4,r4,#1              ;113
                  |L3.64|
000040  42ac              CMP      r4,r5                 ;113
000042  d3f8              BCC      |L3.54|
;;;115    		DMA_SetCurrDataCounter(DMA1_Channel5,Uart1_Rx_LEN);
000044  2180              MOVS     r1,#0x80
000046  4808              LDR      r0,|L3.104|
000048  f7fffffe          BL       DMA_SetCurrDataCounter
;;;116    		DMA_Cmd(DMA1_Channel5,ENABLE);
00004c  2101              MOVS     r1,#1
00004e  4806              LDR      r0,|L3.104|
000050  f7fffffe          BL       DMA_Cmd
;;;117    			TIM_Cmd(TIM4, ENABLE);
000054  2101              MOVS     r1,#1
000056  4803              LDR      r0,|L3.100|
000058  f7fffffe          BL       TIM_Cmd
                  |L3.92|
;;;118        } 
;;;119    	__nop(); 
00005c  bf00              NOP      
;;;120    } 
00005e  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L3.96|
                          DCD      0x40013800
                  |L3.100|
                          DCD      0x40000800
                  |L3.104|
                          DCD      0x40020058
                  |L3.108|
                          DCD      Uart1_Rx

                          AREA ||i.USART1_SendChar||, CODE, READONLY, ALIGN=2

                  USART1_SendChar PROC
;;;70     
;;;71     void USART1_SendChar(char b)
000000  b510              PUSH     {r4,lr}
;;;72     {
000002  4604              MOV      r4,r0
;;;73         while( USART_GetFlagStatus(USART1,USART_FLAG_TC) == RESET);
000004  bf00              NOP      
                  |L4.6|
000006  2140              MOVS     r1,#0x40
000008  4804              LDR      r0,|L4.28|
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L4.6|
;;;74     	USART_SendData(USART1,b);
000012  4621              MOV      r1,r4
000014  4801              LDR      r0,|L4.28|
000016  f7fffffe          BL       USART_SendData
;;;75     }
00001a  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  |L4.28|
                          DCD      0x40013800

                          AREA ||i.USART1_Send_Date||, CODE, READONLY, ALIGN=1

                  USART1_Send_Date PROC
;;;91     }
;;;92     void USART1_Send_Date( USART_TypeDef* USARTx, u8 *pWord, u16 Len )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;93     {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;94     	u8 i = 0;
00000a  2600              MOVS     r6,#0
;;;95     	for(i=0; i<Len; i++) {
00000c  bf00              NOP      
00000e  e00d              B        |L5.44|
                  |L5.16|
;;;96     		USART_SendData(USARTx, (uint8_t)*pWord);
000010  7821              LDRB     r1,[r4,#0]
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       USART_SendData
;;;97     		while(USART_GetFlagStatus(USARTx,USART_FLAG_TC) == RESET);
000018  bf00              NOP      
                  |L5.26|
00001a  2140              MOVS     r1,#0x40
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       USART_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L5.26|
;;;98     		pWord++;
000026  1c64              ADDS     r4,r4,#1
000028  1c70              ADDS     r0,r6,#1              ;95
00002a  b2c6              UXTB     r6,r0                 ;95
                  |L5.44|
00002c  42ae              CMP      r6,r5                 ;95
00002e  dbef              BLT      |L5.16|
;;;99     	}
;;;100    }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;101    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;76     
;;;77     int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;78     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;79         while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
000006  bf00              NOP      
                  |L6.8|
000008  2140              MOVS     r1,#0x40
00000a  4805              LDR      r0,|L6.32|
00000c  f7fffffe          BL       USART_GetFlagStatus
000010  2800              CMP      r0,#0
000012  d0f9              BEQ      |L6.8|
;;;80         USART_SendData(USART1, (uint8_t)ch);
000014  b2e1              UXTB     r1,r4
000016  4802              LDR      r0,|L6.32|
000018  f7fffffe          BL       USART_SendData
;;;81         return ch;
00001c  4620              MOV      r0,r4
;;;82     }
00001e  bd70              POP      {r4-r6,pc}
;;;83     
                          ENDP

                  |L6.32|
                          DCD      0x40013800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Uart1_Rx
                          %        128

                          AREA ||.data||, DATA, ALIGN=0

                  com_cmd1_flag
000000  00                DCB      0x00
                  com_cmd2_flag
000001  00                DCB      0x00
