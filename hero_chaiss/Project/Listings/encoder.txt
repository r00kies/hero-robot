; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\encoder.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\encoder.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Mylib -I..\Libraries -I..\CM3 -I..\User -I..\User\debug -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\encoder.crf ..\Mylib\encoder.c]
                          THUMB

                          AREA ||i.Encoder_Configuration||, CODE, READONLY, ALIGN=2

                  Encoder_Configuration PROC
;;;5      
;;;6      void Encoder_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;7      {
;;;8      
;;;9      
;;;10     
;;;11         GPIO_InitTypeDef gpio;
;;;12     
;;;13         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO,ENABLE);
000002  2101              MOVS     r1,#1
000004  2009              MOVS     r0,#9
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;14         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);   
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;15         GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3,ENABLE);   
000012  2101              MOVS     r1,#1
000014  480d              LDR      r0,|L1.76|
000016  f7fffffe          BL       GPIO_PinRemapConfig
;;;16         gpio.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_4;
00001a  2030              MOVS     r0,#0x30
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;17         gpio.GPIO_Speed = GPIO_Speed_2MHz;
000020  2002              MOVS     r0,#2
000022  f88d0002          STRB     r0,[sp,#2]
;;;18     	  gpio.GPIO_Mode = GPIO_Mode_IPU;
000026  2048              MOVS     r0,#0x48
000028  f88d0003          STRB     r0,[sp,#3]
;;;19     	  GPIO_Init(GPIOB,&gpio);
00002c  4669              MOV      r1,sp
00002e  4808              LDR      r0,|L1.80|
000030  f7fffffe          BL       GPIO_Init
;;;20         TIM_EncoderInterfaceConfig(TIM3, 
000034  2302              MOVS     r3,#2
000036  461a              MOV      r2,r3
000038  2103              MOVS     r1,#3
00003a  4806              LDR      r0,|L1.84|
00003c  f7fffffe          BL       TIM_EncoderInterfaceConfig
;;;21     	                            TIM_EncoderMode_TI12,
;;;22     							                TIM_ICPolarity_Falling,
;;;23     							                TIM_ICPolarity_Falling);
;;;24         TIM_Cmd(TIM3,ENABLE);
000040  2101              MOVS     r1,#1
000042  4804              LDR      r0,|L1.84|
000044  f7fffffe          BL       TIM_Cmd
;;;25     }
000048  bd08              POP      {r3,pc}
;;;26     
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x001a0800
                  |L1.80|
                          DCD      0x40010c00
                  |L1.84|
                          DCD      0x40000400

                          AREA ||i.Encoder_Get_CNT||, CODE, READONLY, ALIGN=2

                  Encoder_Get_CNT PROC
;;;31     
;;;32     int Encoder_Get_CNT(void)
000000  2000              MOVS     r0,#0
;;;33     {
;;;34         int cnt = 0;
;;;35         cnt = (TIM3->CNT)-0x7fff;
000002  4905              LDR      r1,|L2.24|
000004  8809              LDRH     r1,[r1,#0]
000006  f5a140fe          SUB      r0,r1,#0x7f00
00000a  38ff              SUBS     r0,r0,#0xff
;;;36         TIM3->CNT = 0x7fff;
00000c  f64771ff          MOV      r1,#0x7fff
000010  4a01              LDR      r2,|L2.24|
000012  8011              STRH     r1,[r2,#0]
;;;37         return cnt;
;;;38     }
000014  4770              BX       lr
;;;39     
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40000424

                          AREA ||i.Encoder_Start||, CODE, READONLY, ALIGN=2

                  Encoder_Start PROC
;;;26     
;;;27     void Encoder_Start(void)
000000  f64770ff          MOV      r0,#0x7fff
;;;28     {
;;;29         TIM3->CNT = 0x7fff;
000004  4901              LDR      r1,|L3.12|
000006  8008              STRH     r0,[r1,#0]
;;;30     }
000008  4770              BX       lr
;;;31     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40000424

                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM3_IRQHandler PROC
;;;39     
;;;40     void TIM3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;41     {
;;;42         if (TIM_GetITStatus(TIM3,TIM_IT_Update)!= RESET) 
000002  2101              MOVS     r1,#1
000004  4804              LDR      r0,|L4.24|
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b118              CBZ      r0,|L4.20|
;;;43     	{
;;;44     	   TIM_ClearITPendingBit(TIM3,TIM_IT_Update);
00000c  2101              MOVS     r1,#1
00000e  4802              LDR      r0,|L4.24|
000010  f7fffffe          BL       TIM_ClearITPendingBit
                  |L4.20|
;;;45       } 
;;;46     }
000014  bd10              POP      {r4,pc}
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40000400
